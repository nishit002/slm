"""
AI CURRICULUM GENERATOR - COMPLETE FIXED VERSION
=================================================
With proper navigation and data persistence
"""

import streamlit as st
import requests
import json
import subprocess
import time
import os
import re
from datetime import datetime
import threading

# Configuration
DEFAULT_API_KEY = "xai-6QJwG3u6540lVZyXbFBArvLQ43ZyJsrnq65pyCWhxh5zXqNvtwe6LdTURbTwvE2sA3Uxlb9gn82Vamgu"
API_URL = "https://api.x.ai/v1/chat/completions"

# Enhanced LaTeX Template
LATEX_TEMPLATE = r"""
\documentclass[12pt, a4paper]{report}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{amsmath, amssymb}
\usepackage{graphicx}
\usepackage{geometry}
\usepackage{fancyhdr}
\usepackage{tocbibind}
\usepackage{titlesec}
\usepackage{hyperref}
\usepackage{float}
\usepackage{caption}
\usepackage{setspace}
\usepackage{enumitem}
\usepackage{tocloft}
\usepackage{microtype}
\usepackage{parskip}

\geometry{
    a4paper,
    left=1in,
    right=1in,
    top=1in,
    bottom=1in,
    headheight=15pt
}

\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    urlcolor=cyan,
    citecolor=blue,
    pdfborder={0 0 0}
}

\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{\small\textit{\nouppercase{\leftmark}}}
\fancyhead[R]{\small\thepage}
\renewcommand{\headrulewidth}{0.4pt}
\fancyfoot{}

\titleformat{\chapter}[display]
  {\normalfont\Large\bfseries\centering}
  {\MakeUppercase{\chaptertitlename\ \thechapter}}{10pt}{\Large\MakeUppercase}
\titlespacing*{\chapter}{0pt}{-20pt}{30pt}

\titleformat{\section}
  {\normalfont\large\bfseries}{\thesection}{1em}{}
\titlespacing*{\section}{0pt}{12pt}{6pt}

\titleformat{\subsection}
  {\normalfont\normalsize\bfseries}{\thesubsection}{1em}{}
\titlespacing*{\subsection}{0pt}{10pt}{5pt}

\renewcommand{\cfttoctitlefont}{\hfill\Large\bfseries}
\renewcommand{\cftaftertoctitle}{\hfill}
\renewcommand{\cftchapfont}{\bfseries}
\renewcommand{\cftsecfont}{\normalfont}
\setlength{\cftbeforechapskip}{8pt}
\setlength{\cftbeforesecskip}{3pt}

\setlist[itemize]{leftmargin=*, itemsep=3pt, topsep=6pt}
\setlist[enumerate]{leftmargin=*, itemsep=3pt, topsep=6pt}

\captionsetup{
    font=small,
    labelfont=bf,
    justification=centering,
    skip=10pt
}

\onehalfspacing
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt}

\usepackage{tcolorbox}
\newtcolorbox{checkprogress}{
    colback=gray!10,
    colframe=black,
    boxrule=0.5pt,
    arc=2mm,
    left=5mm,
    right=5mm,
    top=5mm,
    bottom=5mm,
    title={\textbf{CHECK YOUR PROGRESS}},
    fonttitle=\bfseries,
    coltitle=black,
    colbacktitle=gray!20,
    toptitle=3mm,
    bottomtitle=3mm
}

\begin{document}

\begin{titlepage}
\centering
\vspace*{2cm}
{\LARGE\bfseries UNIT 1\par}
\vspace{1cm}
{\Huge\bfseries %(course_title)s\par}
\vspace{2cm}
{\Large Academic Study Material\par}
\vspace{1cm}
{\large For %(target_audience)s\par}
\vfill
{\large Generated by AI Curriculum Generator\par}
{\large \today\par}
\end{titlepage}

\chapter*{Structure}
\addcontentsline{toc}{chapter}{Structure}
%(structure_content)s

\clearpage
\tableofcontents
\clearpage

%(list_of_figures)s

%(content)s

\end{document}
"""

content_lock = threading.Lock()

def initialize_session_state():
    """Initialize all session state variables with defaults"""
    defaults = {
        'step': 'configuration',
        'api_key': DEFAULT_API_KEY,
        'custom_model': '',
        'course_title': 'Organisational Behaviour: Concept, Nature & Historical Perspectives',
        'target_audience': 'Postgraduate (MBA)',
        'learning_objectives': 'Comprehensive course content',
        'num_units': 4,
        'sections_per_unit': 8
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

def get_api_headers():
    api_key = st.session_state.get('api_key', DEFAULT_API_KEY)
    return {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

def make_api_call(messages, retries=2, delay=3, timeout=180):
    """Optimized API call"""
    headers = get_api_headers()
    
    if st.session_state.get('custom_model', '').strip():
        models = [st.session_state.custom_model]
    else:
        models = ["grok-2-1212"]
    
    for model in models:
        payload = {
            "messages": messages,
            "model": model,
            "stream": False,
            "temperature": 0.3,
            "max_tokens": 2000
        }
        
        for attempt in range(retries):
            try:
                response = requests.post(API_URL, headers=headers, json=payload, timeout=timeout)
                response.raise_for_status()
                return response.json()['choices'][0]['message']['content']
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 404:
                    break
                elif e.response.status_code == 401:
                    st.error("‚ùå Invalid API Key")
                    return None
                if attempt < retries - 1:
                    time.sleep(delay)
            except Exception:
                if attempt < retries - 1:
                    time.sleep(delay)
    
    return None

def escape_latex(text):
    """Enhanced LaTeX escaping"""
    if not text:
        return ""
    text = str(text)
    
    replacements = [
        ('\\', '\\textbackslash{}'),
        ('{', '\\{'),
        ('}', '\\}'),
        ('_', '\\_'),
        ('#', '\\#'),
        ('%', '\\%'),
        ('&', '\\&'),
        ('$', '\\$'),
        ('~', '\\textasciitilde{}'),
        ('^', '\\textasciicircum{}')
    ]
    
    for old, new in replacements:
        text = text.replace(old, new)
    
    return text

def markdown_to_latex(md_text):
    """Enhanced Markdown to LaTeX conversion"""
    if not md_text:
        return ""
    
    # Handle "Check Your Progress" sections
    md_text = re.sub(
        r'---+\s*CHECK YOUR PROGRESS\s*---+(.*?)---+',
        r'\n\\begin{checkprogress}\n\\begin{enumerate}[label=\\arabic*)]\\item \1\\end{enumerate}\n\\end{checkprogress}\n',
        md_text,
        flags=re.DOTALL | re.IGNORECASE
    )
    
    # Handle figures
    md_text = re.sub(
        r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]',
        r'\n\\begin{figure}[H]\n\\centering\n\\includegraphics[width=0.7\\textwidth]{figure_\1.png}\n\\caption{\2}\n\\label{fig:\1}\n\\end{figure}\n',
        md_text,
        flags=re.IGNORECASE
    )
    
    # Convert headers
    md_text = re.sub(r'^# UNIT (\d+):\s*(.*)$', r'\\chapter{\2}', md_text, flags=re.MULTILINE)
    md_text = re.sub(r'^##\s*(\d+\.\d+)\s+(.*)$', r'\\section{\1 \2}', md_text, flags=re.MULTILINE)
    md_text = re.sub(r'^###\s+(.*)$', r'\\subsection{\1}', md_text, flags=re.MULTILINE)
    
    # Convert emphasis
    md_text = re.sub(r'\*\*(.+?)\*\*', r'\\textbf{\1}', md_text)
    md_text = re.sub(r'\*(.+?)\*', r'\\textit{\1}', md_text)
    
    # Handle lists
    lines = md_text.split('\n')
    result = []
    in_itemize = False
    in_enumerate = False
    
    for line in lines:
        if re.match(r'^\s*[-*‚Ä¢]\s+', line):
            if not in_itemize:
                result.append('\\begin{itemize}')
                in_itemize = True
            item = re.sub(r'^\s*[-*‚Ä¢]\s+', '', line)
            result.append(f'\\item {item}')
        elif re.match(r'^\s*\d+\.\s+', line):
            if not in_enumerate:
                result.append('\\begin{enumerate}')
                in_enumerate = True
            item = re.sub(r'^\s*\d+\.\s+', '', line)
            result.append(f'\\item {item}')
        else:
            if in_itemize:
                result.append('\\end{itemize}')
                in_itemize = False
            if in_enumerate:
                result.append('\\end{enumerate}')
                in_enumerate = False
            result.append(line)
    
    if in_itemize:
        result.append('\\end{itemize}')
    if in_enumerate:
        result.append('\\end{enumerate}')
    
    return '\n'.join(result)

def generate_structure_content(outline):
    """Generate the Structure section"""
    structure = ""
    section_num = 1.1
    
    for unit in outline:
        unit_title = unit.get('unit_title', 'Untitled')
        sections = unit.get('sections', [])
        
        for section in sections:
            sec_title = section.get('section_title', 'Untitled')
            structure += f"{section_num} {sec_title}\n\n"
            section_num = round(section_num + 0.1, 1)
    
    return escape_latex(structure)

def compile_pdf(course_title, content_dict, outline, target_audience="Postgraduate", uploaded_images=None):
    """Enhanced PDF compilation"""
    st.info("üìÑ Assembling document...")
    
    # Handle uploaded images
    has_figures = False
    if uploaded_images:
        for fig_num, img_file in uploaded_images.items():
            if img_file:
                has_figures = True
                with open(f"figure_{fig_num}.png", "wb") as f:
                    f.write(img_file.getvalue())
    
    # Generate structure content
    structure_content = generate_structure_content(outline)
    
    # Assemble full content
    full_content = ""
    for unit in outline:
        unit_num = unit.get('unit_number', 1)
        unit_title = unit.get('unit_title', 'Untitled')
        
        full_content += f"# UNIT {unit_num}: {unit_title}\n\n"
        
        for section in unit.get('sections', []):
            sec_num = section.get('section_number', '1.1')
            sec_title = section.get('section_title', 'Untitled')
            sec_key = f"{sec_num} {sec_title}"
            
            full_content += f"## {sec_key}\n\n"
            full_content += content_dict.get(sec_key, "[Content not generated]") + "\n\n"
    
    st.info("‚úçÔ∏è Converting to LaTeX...")
    latex_content = markdown_to_latex(full_content)
    
    list_of_figs = "\\listoffigures\n\\clearpage\n" if has_figures else ""
    
    # Format the document
    final_doc = LATEX_TEMPLATE % {
        'course_title': escape_latex(course_title),
        'target_audience': escape_latex(target_audience),
        'structure_content': structure_content,
        'list_of_figures': list_of_figs,
        'content': latex_content
    }
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"curriculum_{timestamp}"
    
    with open(f"{filename}.tex", "w", encoding='utf-8') as f:
        f.write(final_doc)
    
    st.info("üî® Compiling PDF (this may take 30-60 seconds)...")
    try:
        for i in range(3):
            result = subprocess.run(
                ['pdflatex', '-interaction=nonstopmode', f'{filename}.tex'],
                capture_output=True,
                timeout=120,
                cwd=os.getcwd()
            )
        
        if os.path.exists(f"{filename}.pdf"):
            st.success("‚úÖ PDF compiled successfully!")
            return f"{filename}.pdf"
        else:
            st.error("‚ùå PDF file not created")
            return None
    except subprocess.TimeoutExpired:
        st.error("‚ùå Compilation timeout")
        return None
    except Exception as e:
        st.error(f"‚ùå Compilation failed: {str(e)}")
        return None

def generate_section_content(section_info, course_context):
    """Generate content for a single section"""
    system_prompt = f"""You are an expert academic writer for {course_context['target_audience']} level courses.

CRITICAL INSTRUCTIONS:
- Write ONLY for section: {section_info['section_number']} {section_info['section_title']}
- Write 500-700 words
- Use clear academic language
- Include relevant examples
- Format with bullet points where appropriate
- Add one "CHECK YOUR PROGRESS" section at the end with 3-4 questions

FORMAT:
- Use * for bullet points
- Use ** for bold text
- Add: --- CHECK YOUR PROGRESS ---
  1. Question one?
  2. Question two?
  ---

DO NOT write about other sections."""

    user_prompt = f"""Write complete academic content for this section ONLY:

**Section:** {section_info['section_number']} {section_info['section_title']}
**Unit:** {section_info['unit_title']}
**Topics to cover:** {section_info['description']}
**Course:** {course_context['course_title']}
**Audience:** {course_context['target_audience']}

Write clear, comprehensive content for THIS SECTION ONLY."""

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]
    
    return make_api_call(messages)

def show_navigation():
    """Show navigation breadcrumb"""
    steps = {
        'configuration': '1Ô∏è‚É£ Configuration',
        'outline_generation': '2Ô∏è‚É£ Outline',
        'content_generation': '3Ô∏è‚É£ Content Generation',
        'compilation': '4Ô∏è‚É£ Compilation'
    }
    
    current_step = st.session_state.get('step', 'configuration')
    
    cols = st.columns(len(steps))
    for idx, (step_key, step_name) in enumerate(steps.items()):
        with cols[idx]:
            if step_key == current_step:
                st.markdown(f"**üîµ {step_name}**")
            else:
                st.markdown(f"‚ö™ {step_name}")
    
    st.divider()

def show_configuration_page():
    st.header("‚öôÔ∏è Step 1: Configure Your Course")
    
    st.subheader("üîë API Configuration")
    
    col1, col2 = st.columns([2, 1])
    with col1:
        use_custom = st.checkbox("Use Custom Model Name")
    with col2:
        if use_custom:
            custom_model = st.text_input(
                "Model Name",
                value=st.session_state.get('custom_model', 'grok-2-1212')
            )
            st.session_state.custom_model = custom_model
    
    col1, col2 = st.columns([3, 1])
    with col1:
        api_key = st.text_input(
            "Grok API Key",
            value=st.session_state.get('api_key', DEFAULT_API_KEY),
            type="password",
            key="api_key_input"
        )
        st.session_state.api_key = api_key
        
        if api_key and api_key.startswith('xai-'):
            st.success("‚úÖ Valid API key format")
    
    with col2:
        if st.button("üß™ Test API", use_container_width=True):
            with st.spinner("Testing connection..."):
                resp = make_api_call([{"role": "user", "content": "Hi"}])
                if resp:
                    st.success("‚úÖ API Working!")
                else:
                    st.error("‚ùå API Test Failed")
    
    st.divider()
    st.subheader("üìö Course Details")
    
    course_title = st.text_input(
        "Course Title",
        value=st.session_state.course_title,
        key="course_title_input"
    )
    st.session_state.course_title = course_title
    
    target_audience = st.selectbox(
        "Target Audience",
        ["Postgraduate (MBA)", "Undergraduate", "Professional Development"],
        index=0,
        key="target_audience_input"
    )
    st.session_state.target_audience = target_audience
    
    learning_objectives = st.text_area(
        "Learning Objectives (Optional)",
        value=st.session_state.learning_objectives,
        key="learning_objectives_input",
        height=100
    )
    st.session_state.learning_objectives = learning_objectives
    
    num_units = st.number_input(
        "Number of Units",
        min_value=1,
        max_value=10,
        value=st.session_state.num_units,
        key="num_units_input"
    )
    st.session_state.num_units = num_units
    
    sections_per_unit = st.number_input(
        "Sections per Unit",
        min_value=3,
        max_value=15,
        value=st.session_state.sections_per_unit,
        key="sections_per_unit_input"
    )
    st.session_state.sections_per_unit = sections_per_unit
    
    st.divider()
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üöÄ Generate Course Outline", type="primary", use_container_width=True):
            if st.session_state.api_key:
                st.session_state.step = "outline_generation"
                st.rerun()
            else:
                st.error("‚ö†Ô∏è Please enter an API key first!")
    
    with col2:
        # Show button to continue if outline already exists
        if 'outline' in st.session_state or 'approved_outline' in st.session_state:
            if st.button("‚û°Ô∏è Continue to Outline", use_container_width=True):
                st.session_state.step = "outline_generation"
                st.rerun()

def show_outline_page():
    st.header("üìã Step 2: Review Course Outline")
    
    if 'outline' not in st.session_state:
        with st.spinner("ü§ñ Generating course outline..."):
            system_prompt = """Create a JSON array of course units with sections.

STRICT JSON FORMAT:
[
  {
    "unit_number": 1,
    "unit_title": "Title Here",
    "sections": [
      {
        "section_number": "1.1",
        "section_title": "Section Title",
        "description": "What this section covers"
      }
    ]
  }
]

Return ONLY valid JSON, no other text."""

            user_prompt = f"""Course: {st.session_state.course_title}
Target: {st.session_state.target_audience}

Create {st.session_state.num_units} units with {st.session_state.sections_per_unit} sections each.
Section numbers: 1.1, 1.2, 1.3, etc.

Output JSON only."""
            
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
            
            outline_str = make_api_call(messages)
            
            if outline_str:
                try:
                    json_match = re.search(r'```(?:json)?\s*\n(.*?)\n```', outline_str, re.DOTALL)
                    if json_match:
                        outline_str = json_match.group(1)
                    
                    st.session_state.outline = json.loads(outline_str.strip())
                    st.success("‚úÖ Outline generated!")
                except json.JSONDecodeError:
                    st.error("‚ùå Failed to parse outline. Using default structure.")
                    st.session_state.outline = create_default_outline()
            else:
                st.error("‚ùå API call failed. Using default structure.")
                st.session_state.outline = create_default_outline()
    
    if 'outline' in st.session_state:
        total_sections = sum(len(unit.get('sections', [])) for unit in st.session_state.outline)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìö Units", len(st.session_state.outline))
        with col2:
            st.metric("üìÑ Total Sections", total_sections)
        with col3:
            estimated_pages = (total_sections * 2) + 10
            st.metric("üìñ Est. Pages", f"~{estimated_pages}")
        
        st.divider()
        
        rows = []
        for unit in st.session_state.outline:
            for section in unit.get('sections', []):
                rows.append({
                    'Unit': unit['unit_number'],
                    'Unit Title': unit['unit_title'],
                    'Section': section['section_number'],
                    'Section Title': section['section_title'],
                    'Description': section['description']
                })
        
        st.subheader("‚úèÔ∏è Edit Outline (Click cells to edit)")
        edited = st.data_editor(
            rows,
            num_rows="dynamic",
            use_container_width=True,
            height=500,
            column_config={
                "Unit": st.column_config.NumberColumn("Unit #", width="small"),
                "Unit Title": st.column_config.TextColumn("Unit Title", width="medium"),
                "Section": st.column_config.TextColumn("Section #", width="small"),
                "Section Title": st.column_config.TextColumn("Section Title", width="medium"),
                "Description": st.column_config.TextColumn("Description", width="large")
            }
        )
        
        st.divider()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("‚Üê Back to Configuration", use_container_width=True):
                st.session_state.step = "configuration"
                st.rerun()
        
        with col2:
            if st.button("‚úÖ Approve & Start", type="primary", use_container_width=True):
                approved = []
                current = None
                
                for row in edited:
                    if current is None or current['unit_number'] != row['Unit']:
                        if current:
                            approved.append(current)
                        current = {
                            'unit_number': row['Unit'],
                            'unit_title': row['Unit Title'],
                            'sections': []
                        }
                    current['sections'].append({
                        'section_number': row['Section'],
                        'section_title': row['Section Title'],
                        'description': row['Description']
                    })
                
                if current:
                    approved.append(current)
                
                st.session_state.approved_outline = approved
                st.session_state.step = "content_generation"
                st.rerun()
        
        with col3:
            # Show continue button if content exists
            if 'content' in st.session_state and st.session_state.content:
                if st.button("‚û°Ô∏è Continue to Content", use_container_width=True):
                    st.session_state.step = "content_generation"
                    st.rerun()

def create_default_outline():
    """Create a default outline if generation fails"""
    return [
        {
            "unit_number": 1,
            "unit_title": "Introduction",
            "sections": [
                {
                    "section_number": "1.1",
                    "section_title": "Overview",
                    "description": "Introduction to the subject"
                },
                {
                    "section_number": "1.2",
                    "section_title": "Objectives",
                    "description": "Learning objectives"
                }
            ]
        }
    ]

def show_content_generation_page():
    st.header("‚úçÔ∏è Step 3: Automated Content Generation")
    
    if 'approved_outline' not in st.session_state:
        st.error("‚ùå No approved outline found")
        if st.button("‚Üê Go Back to Outline"):
            st.session_state.step = "outline_generation"
            st.rerun()
        return
    
    if 'content' not in st.session_state:
        st.session_state.content = {}
        st.session_state.sections_to_process = []
        st.session_state.generation_start_time = time.time()
        
        for unit in st.session_state.approved_outline:
            for section in unit.get('sections', []):
                st.session_state.sections_to_process.append({
                    'unit_number': unit['unit_number'],
                    'unit_title': unit['unit_title'],
                    'section_number': section['section_number'],
                    'section_title': section['section_title'],
                    'description': section.get('description', '')
                })
    
    total = len(st.session_state.sections_to_process)
    completed = len(st.session_state.content)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("‚úÖ Completed", f"{completed}/{total}")
    with col2:
        progress_pct = (completed / total * 100) if total > 0 else 0
        st.metric("üìä Progress", f"{progress_pct:.0f}%")
    with col3:
        remaining = total - completed
        st.metric("‚è≥ Remaining", remaining)
    with col4:
        if completed > 0:
            elapsed = time.time() - st.session_state.generation_start_time
            avg_time = elapsed / completed
            eta_seconds = avg_time * remaining
            eta_minutes = int(eta_seconds / 60)
            st.metric("‚è±Ô∏è ETA", f"~{eta_minutes}min")
    
    st.progress(completed / total if total > 0 else 0)
    
    if completed < total:
        current = st.session_state.sections_to_process[completed]
        section_key = f"{current['section_number']} {current['section_title']}"
        
        st.info(f"ü§ñ Currently generating: **{section_key}**")
        
        with st.spinner(f"Writing section {completed + 1} of {total}..."):
            course_context = {
                'course_title': st.session_state.course_title,
                'target_audience': st.session_state.target_audience
            }
            
            content = generate_section_content(current, course_context)
            
            if content:
                with content_lock:
                    st.session_state.content[section_key] = content
                st.success(f"‚úÖ Completed: {section_key}")
                time.sleep(0.5)
                st.rerun()
            else:
                st.error(f"‚ùå Failed to generate: {section_key}")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üîÑ Retry", use_container_width=True):
                        st.rerun()
                with col2:
                    if st.button("‚è≠Ô∏è Skip", use_container_width=True):
                        with content_lock:
                            st.session_state.content[section_key] = f"[Content for {section_key} - To be added]"
                        st.rerun()
    else:
        st.success("üéâ All content generated successfully!")
        
        total_words = sum(len(c.split()) for c in st.session_state.content.values())
        total_chars = sum(len(c) for c in st.session_state.content.values())
        estimated_pages = total_chars / 3000
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìù Total Words", f"{total_words:,}")
        with col2:
            st.metric("üìÑ Total Sections", total)
        with col3:
            st.metric("üìñ Estimated Pages", f"~{estimated_pages:.0f}")
        
        st.divider()
        
        if st.checkbox("üëÅÔ∏è Preview Generated Content"):
            for unit in st.session_state.approved_outline:
                with st.expander(f"üìö Unit {unit['unit_number']}: {unit['unit_title']}", expanded=False):
                    for section in unit.get('sections', []):
                        sec_key = f"{section['section_number']} {section['section_title']}"
                        if sec_key in st.session_state.content:
                            st.markdown(f"### {sec_key}")
                            st.markdown(st.session_state.content[sec_key][:500] + "...")
                            st.caption(f"üìä {len(st.session_state.content[sec_key].split())} words")
        
        st.divider()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("‚Üê Back to Outline", use_container_width=True):
                st.session_state.step = "outline_generation"
                st.rerun()
        
        with col2:
            if st.button("üîÑ Regenerate All", use_container_width=True):
                if st.checkbox("‚ö†Ô∏è Delete all content and regenerate?", key="regen_confirm"):
                    del st.session_state.content
                    del st.session_state.sections_to_process
                    st.rerun()
        
        with col3:
            if st.button("üìÑ Compile PDF", type="primary", use_container_width=True):
                st.session_state.step = "compilation"
                st.rerun()

def show_compilation_page():
    st.header("üìÑ Step 4: Compile PDF")
    
    # Verify all required data exists
    if 'content' not in st.session_state or not st.session_state.content:
        st.error("‚ùå No content found to compile")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚Üê Back to Content Generation", use_container_width=True):
                st.session_state.step = "content_generation"
                st.rerun()
        with col2:
            if st.button("üè† Start Over", use_container_width=True):
                # Clear all data
                for key in list(st.session_state.keys()):
                    if key not in ['api_key', 'custom_model']:
                        del st.session_state[key]
                st.session_state.step = "configuration"
                st.rerun()
        return
    
    if 'approved_outline' not in st.session_state:
        st.error("‚ùå No outline found")
        if st.button("‚Üê Back to Outline", use_container_width=True):
            st.session_state.step = "outline_generation"
            st.rerun()
        return
    
    # Show summary before compilation
    st.subheader("üìä Document Summary")
    
    total_sections = len(st.session_state.content)
    total_words = sum(len(c.split()) for c in st.session_state.content.values())
    total_chars = sum(len(c) for c in st.session_state.content.values())
    estimated_pages = total_chars / 3000
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìö Units", len(st.session_state.approved_outline))
    with col2:
        st.metric("üìÑ Sections", total_sections)
    with col3:
        st.metric("üìù Words", f"{total_words:,}")
    with col4:
        st.metric("üìñ Est. Pages", f"~{estimated_pages:.0f}")
    
    st.divider()
    
    # Check for figures in content
    fig_nums = set()
    fig_descs = {}
    for content in st.session_state.content.values():
        figs = re.findall(r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]', content, re.IGNORECASE)
        for num, desc in figs:
            num = int(num)
            fig_nums.add(num)
            if num not in fig_descs:
                fig_descs[num] = desc
    
    # Image upload section (if figures detected)
    if fig_nums:
        st.subheader("üñºÔ∏è Upload Images (Optional)")
        st.info(f"üì∏ {len(fig_nums)} figures detected in your content")
        
        if 'uploaded_images' not in st.session_state:
            st.session_state.uploaded_images = {}
        
        with st.expander("Upload Figure Images", expanded=True):
            for num in sorted(fig_nums):
                desc = fig_descs.get(num, "")
                uploaded = st.file_uploader(
                    f"Figure {num}: {desc}",
                    type=['png', 'jpg', 'jpeg'],
                    key=f"fig_upload_{num}"
                )
                if uploaded:
                    st.session_state.uploaded_images[num] = uploaded
                    st.success(f"‚úÖ Uploaded: Figure {num}")
            
            st.caption("üí° Tip: Leave empty to use placeholder images")
        
        st.divider()
    
    # Compilation options
    st.subheader("‚öôÔ∏è Compilation Options")
    
    col1, col2 = st.columns(2)
    with col1:
        include_toc = st.checkbox("Include Table of Contents", value=True)
    with col2:
        include_figures_list = st.checkbox("Include List of Figures", value=bool(fig_nums))
    
    st.divider()
    
    # Compilation buttons
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚Üê Back to Content", use_container_width=True):
            st.session_state.step = "content_generation"
            st.rerun()
    
    with col2:
        if st.button("üìù Edit Content", use_container_width=True):
            st.session_state.show_editor = True
            st.rerun()
    
    with col3:
        compile_button = st.button("üî® Compile PDF", type="primary", use_container_width=True)
    
    # Show editor if requested
    if st.session_state.get('show_editor', False):
        st.divider()
        st.subheader("‚úèÔ∏è Quick Content Editor")
        
        for unit in st.session_state.approved_outline:
            with st.expander(f"UNIT {unit['unit_number']}: {unit['unit_title']}"):
                for section in unit.get('sections', []):
                    sec_key = f"{section['section_number']} {section['section_title']}"
                    if sec_key in st.session_state.content:
                        st.markdown(f"**{sec_key}**")
                        edited_content = st.text_area(
                            "Edit content:",
                            value=st.session_state.content[sec_key],
                            height=200,
                            key=f"edit_{sec_key}"
                        )
                        if st.button(f"üíæ Save", key=f"save_{sec_key}"):
                            st.session_state.content[sec_key] = edited_content
                            st.success(f"‚úÖ Saved: {sec_key}")
        
        if st.button("‚úÖ Done Editing"):
            st.session_state.show_editor = False
            st.rerun()
        
        st.divider()
    
    # Perform compilation
    if compile_button:
        with st.spinner("üî® Compiling PDF... This may take 1-2 minutes"):
            pdf_file = compile_pdf(
                st.session_state.course_title,
                st.session_state.content,
                st.session_state.approved_outline,
                st.session_state.target_audience,
                st.session_state.get('uploaded_images', {})
            )
        
        if pdf_file and os.path.exists(pdf_file):
            st.success("‚úÖ PDF Compiled Successfully!")
            
            # Read PDF file
            with open(pdf_file, "rb") as f:
                pdf_bytes = f.read()
            
            st.divider()
            
            # Download section
            st.subheader("üì• Download Your Document")
            
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                download_filename = f"{st.session_state.course_title.replace(' ', '_')[:50]}.pdf"
                st.download_button(
                    label="üì• Download PDF",
                    data=pdf_bytes,
                    file_name=download_filename,
                    mime="application/pdf",
                    use_container_width=True,
                    type="primary"
                )
            
            with col2:
                if st.button("üîÑ Recompile", use_container_width=True):
                    st.rerun()
            
            with col3:
                if st.button("üè† New Project", use_container_width=True):
                    # Clear all session state except API key
                    api_key = st.session_state.get('api_key')
                    custom_model = st.session_state.get('custom_model')
                    st.session_state.clear()
                    st.session_state.api_key = api_key
                    st.session_state.custom_model = custom_model
                    st.session_state.step = "configuration"
                    st.rerun()
            
            # Show file info
            st.info(f"üìä PDF Size: {len(pdf_bytes) / 1024:.2f} KB")
            
            # Preview option
            if st.checkbox("üëÅÔ∏è Preview PDF (experimental)"):
                st.warning("‚ö†Ô∏è PDF preview may not work in all browsers")
                st.markdown(f'<iframe src="data:application/pdf;base64,{pdf_bytes.hex()}" width="100%" height="800px"></iframe>', unsafe_allow_html=True)
            
        else:
            st.error("‚ùå PDF compilation failed")
            
            st.divider()
            st.subheader("üîß Troubleshooting")
            
            with st.expander("View LaTeX Log"):
                log_file = pdf_file.replace('.pdf', '.log') if pdf_file else None
                if log_file and os.path.exists(log_file):
                    with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                        st.code(f.read()[-2000:], language='text')
                else:
                    st.warning("No log file found")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÑ Try Again", use_container_width=True):
                    st.rerun()
            with col2:
                if st.button("‚Üê Back to Content", use_container_width=True):
                    st.session_state.step = "content_generation"
                    st.rerun()

def main():
    st.set_page_config(
        page_title="AI Curriculum Generator",
        page_icon="üéì",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    
    # Custom CSS for better appearance
    st.markdown("""
    <style>
    .stButton button {
        border-radius: 5px;
    }
    .stProgress > div > div > div > div {
        background-color: #1f77b4;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.title("üéì AI Curriculum Generator")
    st.caption("Generate professional academic course materials with AI")
    
    # Initialize session state
    initialize_session_state()
    
    # Show navigation breadcrumb
    show_navigation()
    
    # Show current step
    current_step = st.session_state.get('step', 'configuration')
    
    if current_step == "configuration":
        show_configuration_page()
    elif current_step == "outline_generation":
        show_outline_page()
    elif current_step == "content_generation":
        show_content_generation_page()
    elif current_step == "compilation":
        show_compilation_page()
    else:
        st.error("‚ùå Unknown step. Resetting...")
        st.session_state.step = "configuration"
        st.rerun()
    
    # Sidebar with progress info
    with st.sidebar:
        st.header("üìä Project Status")
        
        if 'course_title' in st.session_state:
            st.markdown(f"**Course:** {st.session_state.course_title[:50]}...")
        
        if 'approved_outline' in st.session_state:
            units = len(st.session_state.approved_outline)
            sections = sum(len(u.get('sections', [])) for u in st.session_state.approved_outline)
            st.metric("Units", units)
            st.metric("Sections", sections)
        
        if 'content' in st.session_state:
            completed = len(st.session_state.content)
            st.metric("Content Generated", completed)
            
            if 'sections_to_process' in st.session_state:
                total = len(st.session_state.sections_to_process)
                progress = (completed / total * 100) if total > 0 else 0
                st.progress(progress / 100)
                st.caption(f"{progress:.0f}% Complete")
        
        st.divider()
        
        # Quick actions
        st.subheader("‚ö° Quick Actions")
        
        if st.button("üè† Start Over", use_container_width=True):
            if st.checkbox("‚ö†Ô∏è Clear all data?", key="sidebar_reset"):
                api_key = st.session_state.get('api_key')
                custom_model = st.session_state.get('custom_model')
                st.session_state.clear()
                st.session_state.api_key = api_key
                st.session_state.custom_model = custom_model
                st.session_state.step = "configuration"
                st.rerun()
        
        if 'content' in st.session_state and st.session_state.content:
            if st.button("üíæ Save Progress", use_container_width=True):
                # Save to JSON
                save_data = {
                    'course_title': st.session_state.course_title,
                    'target_audience': st.session_state.target_audience,
                    'outline': st.session_state.get('approved_outline', []),
                    'content': st.session_state.content,
                    'timestamp': datetime.now().isoformat()
                }
                
                json_str = json.dumps(save_data, indent=2)
                st.download_button(
                    label="üì• Download Backup",
                    data=json_str,
                    file_name=f"curriculum_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json",
                    use_container_width=True
                )
        
        st.divider()
        st.caption("üí° Tip: Your progress is automatically saved in this session")
        st.caption("‚ö†Ô∏è Don't refresh the page or you'll lose unsaved work")

if __name__ == "__main__":
    main()
