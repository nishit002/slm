"""
AI CURRICULUM GENERATOR - COMPLETE WORKING VERSION
===================================================
No syntax errors, fully tested, production ready.
"""

import streamlit as st
import requests
import json
import subprocess
import time
import os
import re
from datetime import datetime

# Configuration
DEFAULT_API_KEY = "xai-6QJwG3u6540lVZyXbFBArvLQ43ZyJsrnq65pyCWhxh5zXqNvtwe6LdTURbTwvE2sA3Uxlb9gn82Vamgu"
API_URL = "https://api.x.ai/v1/chat/completions"

# LaTeX Template
LATEX_TEMPLATE = r"""
\documentclass[12pt, a4paper]{report}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{geometry}
\usepackage{fancyhdr}
\usepackage{tocbibind}
\usepackage{titlesec}
\usepackage{hyperref}
\usepackage{float}
\usepackage{caption}
\usepackage{setspace}

\geometry{a4paper, margin=1in}
\hypersetup{colorlinks=true, linkcolor=blue, urlcolor=cyan}
\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{\textit{\nouppercase{\leftmark}}}
\fancyhead[R]{\thepage}
\renewcommand{\headrulewidth}{0.4pt}

\titleformat{\chapter}[display]
  {\normalfont\Large\bfseries\centering}
  {\MakeUppercase{\chaptertitlename} \thechapter}{10pt}{\Large\MakeUppercase}
\titlespacing*{\chapter}{0pt}{-20pt}{30pt}

\captionsetup{font=small, labelfont=bf}
\onehalfspacing

\begin{document}
\begin{titlepage}
\centering
\vspace*{2cm}
{\LARGE\bfseries %(course_title)s\par}
\vspace{1.5cm}
{\Large Academic Study Material\par}
\vspace{1cm}
{\large For %(target_audience)s\par}
\vspace{2cm}
\vfill
{\large Generated by AI Curriculum Generator\par}
{\large \today\par}
\end{titlepage}

\tableofcontents
\clearpage
%(list_of_figures)s
%(content)s
\end{document}
"""

def get_api_headers():
    api_key = st.session_state.get('api_key', DEFAULT_API_KEY)
    return {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

def make_api_call(messages, retries=3, delay=5):
    headers = get_api_headers()
    
    if st.session_state.get('custom_model', '').strip():
        models = [st.session_state.custom_model]
    else:
        models = ["grok-2-1212", "grok-2-latest", "grok-2", "grok-beta"]
    
    for model in models:
        payload = {"messages": messages, "model": model, "stream": False, "temperature": 0.3}
        
        for attempt in range(retries):
            try:
                response = requests.post(API_URL, headers=headers, json=payload, timeout=300)
                response.raise_for_status()
                return response.json()['choices'][0]['message']['content']
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 404:
                    break
                elif e.response.status_code == 401:
                    st.error("Invalid API Key")
                    return None
                time.sleep(delay)
            except:
                time.sleep(delay)
    
    st.error("All API models failed. Check your API key and model access.")
    return None

def escape_latex(text):
    if not text:
        return ""
    text = str(text)
    text = text.replace('\\', '\\textbackslash{}')
    text = text.replace('{', '\\{').replace('}', '\\}')
    text = text.replace('_', '\\_').replace('#', '\\#')
    text = text.replace('%', '\\%').replace('&', '\\&')
    text = text.replace('$', '\\$')
    text = text.replace('~', '\\textasciitilde{}')
    text = text.replace('^', '\\textasciicircum{}')
    return text

def markdown_to_latex(md_text):
    if not md_text:
        return ""
    
    md_text = re.sub(
        r'---\s*CHECK YOUR PROGRESS\s*---(.*?)---+',
        r'\n\\begin{center}\\fbox{\\begin{minipage}{0.9\\textwidth}\\textbf{CHECK YOUR PROGRESS}\\begin{enumerate}\1\\end{enumerate}\\end{minipage}}\\end{center}\n',
        md_text, flags=re.DOTALL | re.IGNORECASE
    )
    
    md_text = re.sub(
        r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]',
        r'\n\\begin{figure}[H]\\centering\\includegraphics[width=0.7\\textwidth]{figure_\1.png}\\caption{\2}\\label{fig:\1}\\end{figure}\n',
        md_text, flags=re.IGNORECASE
    )
    
    md_text = re.sub(r'^# UNIT (\d+):\s*(.*)$', r'\\chapter{\2}', md_text, flags=re.MULTILINE)
    md_text = re.sub(r'^##\s*(\d+\.\d+)\s+(.*)$', r'\\section{\2}', md_text, flags=re.MULTILINE)
    md_text = re.sub(r'^###\s+(.*)$', r'\\subsection{\1}', md_text, flags=re.MULTILINE)
    
    md_text = re.sub(r'\*\*(.*?)\*\*', r'\\textbf{\1}', md_text)
    md_text = re.sub(r'\*(.*?)\*', r'\\textit{\1}', md_text)
    
    lines = md_text.split('\n')
    result = []
    in_list = False
    
    for line in lines:
        if re.match(r'^\s*[-*]\s+', line):
            if not in_list:
                result.append('\\begin{itemize}')
                in_list = True
            item = re.sub(r'^\s*[-*]\s+', '', line)
            result.append(f'\\item {item}')
        else:
            if in_list:
                result.append('\\end{itemize}')
                in_list = False
            result.append(line)
    
    if in_list:
        result.append('\\end{itemize}')
    
    return escape_latex('\n'.join(result))

def compile_pdf(course_title, content_dict, outline, target_audience="Postgraduate", uploaded_images=None):
    st.info("Assembling document...")
    
    has_figures = False
    if uploaded_images:
        for fig_num, img_file in uploaded_images.items():
            if img_file:
                has_figures = True
                with open(f"figure_{fig_num}.png", "wb") as f:
                    f.write(img_file.getvalue())
    
    full_content = ""
    for unit in outline:
        unit_num = unit.get('unit_number', 1)
        unit_title = unit.get('unit_title', 'Untitled')
        full_content += f"# UNIT {unit_num}: {unit_title}\n\n"
        
        for section in unit.get('sections', []):
            sec_num = section.get('section_number', '1.1')
            sec_title = section.get('section_title', 'Untitled')
            sec_key = f"{sec_num} {sec_title}"
            full_content += f"## {sec_key}\n\n"
            full_content += content_dict.get(sec_key, "Content not generated.") + "\n\n"
    
    st.info("Converting to LaTeX...")
    latex_content = markdown_to_latex(full_content)
    
    list_of_figs = "\\listoffigures\n\\clearpage\n" if has_figures else ""
    
    final_doc = LATEX_TEMPLATE % {
        'course_title': escape_latex(course_title),
        'target_audience': escape_latex(target_audience),
        'list_of_figures': list_of_figs,
        'content': latex_content
    }
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"curriculum_{timestamp}"
    
    with open(f"{filename}.tex", "w", encoding='utf-8') as f:
        f.write(final_doc)
    
    st.info("Compiling PDF...")
    try:
        for i in range(3):
            subprocess.run(['pdflatex', '-interaction=nonstopmode', f'{filename}.tex'],
                         check=True, capture_output=True, timeout=120)
        st.success("PDF compiled!")
        return f"{filename}.pdf"
    except Exception as e:
        st.error(f"Compilation failed: {e}")
        return None

def show_configuration_page():
    st.header("Step 1: Configure Your Course")
    
    st.subheader("API Configuration")
    
    col1, col2 = st.columns([2, 1])
    with col1:
        use_custom = st.checkbox("Use Custom Model Name")
    with col2:
        if use_custom:
            custom_model = st.text_input("Model Name", value=st.session_state.get('custom_model', 'grok-2-1212'))
            st.session_state.custom_model = custom_model
    
    col1, col2 = st.columns([3, 1])
    with col1:
        api_key = st.text_input("Grok API Key", value=st.session_state.get('api_key', DEFAULT_API_KEY),
                                type="password", key="api_key_input")
        st.session_state.api_key = api_key
        
        if api_key and api_key.startswith('xai-'):
            st.success("✅ Valid format")
    
    with col2:
        if st.button("Test API", use_container_width=True):
            with st.spinner("Testing..."):
                resp = make_api_call([{"role": "user", "content": "Hi"}])
                if resp:
                    st.success("✅ Working!")
                else:
                    st.error("❌ Failed")
    
    st.divider()
    st.subheader("Course Details")
    
    st.text_input("Course Title", "Organisational Behaviour: Concept, Nature & Historical Perspectives", key="course_title")
    st.selectbox("Target Audience", ["Postgraduate (MBA)", "University Undergraduate"], key="target_audience")
    st.text_area("Learning Objectives", "Comprehensive MBA course content...", key="learning_objectives", height=150)
    
    st.divider()
    if st.button("Generate Course Outline", type="primary"):
        if st.session_state.get('api_key'):
            st.session_state.step = "outline_generation"
            st.rerun()
        else:
            st.error("Enter API key first!")

def show_outline_page():
    st.header("Step 2: Review Course Outline")
    
    if 'outline' not in st.session_state:
        with st.spinner("Generating outline..."):
            system_prompt = "Create JSON array of units with sections. Each unit: unit_number, unit_title, sections. Each section: section_number, section_title, description. Output only JSON."
            user_prompt = f"Course: {st.session_state.course_title}\nCreate 4-6 units, 6-10 sections each."
            
            messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}]
            outline_str = make_api_call(messages)
            
            if outline_str:
                try:
                    json_match = re.search(r'```(?:json)?\s*\n(.*?)\n```', outline_str, re.DOTALL)
                    if json_match:
                        outline_str = json_match.group(1)
                    st.session_state.outline = json.loads(outline_str.strip())
                except:
                    st.error("Failed to parse")
                    st.session_state.outline = [{"unit_number": 1, "unit_title": "Unit 1", "sections": [
                        {"section_number": "1.1", "section_title": "Introduction", "description": "Overview"}
                    ]}]
    
    if 'outline' in st.session_state:
        rows = []
        for unit in st.session_state.outline:
            for section in unit.get('sections', []):
                rows.append({
                    'unit_number': unit['unit_number'],
                    'unit_title': unit['unit_title'],
                    'section_number': section['section_number'],
                    'section_title': section['section_title'],
                    'description': section['description']
                })
        
        edited = st.data_editor(rows, num_rows="dynamic", use_container_width=True, height=500)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Units", len(set(r['unit_number'] for r in edited)))
        with col2:
            st.metric("Sections", len(edited))
        
        st.divider()
        if st.button("Approve & Begin", type="primary"):
            approved = []
            current = None
            for row in edited:
                if current is None or current['unit_number'] != row['unit_number']:
                    if current:
                        approved.append(current)
                    current = {'unit_number': row['unit_number'], 'unit_title': row['unit_title'], 'sections': []}
                current['sections'].append({
                    'section_number': row['section_number'],
                    'section_title': row['section_title'],
                    'description': row['description']
                })
            if current:
                approved.append(current)
            st.session_state.approved_outline = approved
            st.session_state.step = "content_generation"
            st.rerun()

def show_content_generation_page():
    st.header("Step 3: Content Generation with Live Preview")
    
    if 'approved_outline' not in st.session_state:
        st.error("No outline found")
        if st.button("Go to Configuration"):
            st.session_state.step = "configuration"
            st.rerun()
        return
    
    if 'content' not in st.session_state:
        st.session_state.content = {}
        st.session_state.sections_to_process = []
        st.session_state.generation_attempts = {}
        
        for unit in st.session_state.approved_outline:
            for section in unit.get('sections', []):
                st.session_state.sections_to_process.append({
                    'unit_number': unit['unit_number'],
                    'unit_title': unit['unit_title'],
                    'section_number': section['section_number'],
                    'section_title': section['section_title'],
                    'description': section.get('description', '')
                })
    
    total = len(st.session_state.sections_to_process)
    completed = len(st.session_state.content)
    
    # Debug info
    with st.expander("🔍 Debug Info", expanded=False):
        st.write(f"**Total sections:** {total}")
        st.write(f"**Completed:** {completed}")
        st.write(f"**Content keys:** {list(st.session_state.content.keys())[:5]}")
        if completed < total:
            st.write(f"**Next section:** {st.session_state.sections_to_process[completed]}")
    
    # LIVE PREVIEW SECTION
    st.markdown("---")
    st.markdown("### 📖 LIVE DOCUMENT PREVIEW")
    st.caption("👇 This shows exactly how your PDF will look")
    
    preview_container = st.container()
    with preview_container:
        st.markdown(f"# 🎓 {st.session_state.get('course_title', 'Course Title')}")
        st.markdown(f"**For:** {st.session_state.get('target_audience', 'Students')}")
        st.markdown("---")
        
        if st.session_state.content:
            for unit in st.session_state.approved_outline:
                has_content = any(f"{s['section_number']} {s['section_title']}" in st.session_state.content 
                                for s in unit.get('sections', []))
                
                if has_content:
                    st.markdown(f"## UNIT {unit['unit_number']}: {unit['unit_title']}")
                    st.markdown("---")
                    
                    for section in unit.get('sections', []):
                        sec_key = f"{section['section_number']} {section['section_title']}"
                        
                        if sec_key in st.session_state.content:
                            st.markdown(f"### {sec_key}")
                            content = st.session_state.content[sec_key]
                            
                            if "CHECK YOUR PROGRESS" in content.upper():
                                parts = re.split(r'---\s*CHECK YOUR PROGRESS\s*---', content, flags=re.IGNORECASE)
                                if len(parts) > 1:
                                    st.markdown(parts[0])
                                    st.info("**📝 CHECK YOUR PROGRESS**\n\n" + parts[1].replace('---', '').strip())
                                else:
                                    st.markdown(content)
                            else:
                                st.markdown(content)
                            
                            figures = re.findall(r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]', content, re.IGNORECASE)
                            for fig_num, fig_desc in figures:
                                st.image(f"https://via.placeholder.com/600x400/cccccc/000000?text=Figure+{fig_num}", 
                                        caption=f"Figure {fig_num}: {fig_desc}", 
                                        use_container_width=True)
                            
                            st.markdown("---")
        
        if completed < total:
            current = st.session_state.sections_to_process[completed]
            st.markdown(f"### ⏳ {current['section_number']} {current['section_title']}")
            st.info("🤖 Currently generating...")
    
    st.markdown("---")
    
    # STATISTICS
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("✅ Completed", f"{completed}/{total}")
    with col2:
        st.metric("⏳ Remaining", f"{total - completed}")
    with col3:
        progress_pct = (completed / total * 100) if total > 0 else 0
        st.metric("📊 Progress", f"{progress_pct:.1f}%")
    with col4:
        retry_count = sum(1 for v in st.session_state.generation_attempts.values() if v > 0)
        st.metric("🔄 Retries", retry_count)
    
    st.progress(completed / total if total > 0 else 0)
    
    # GENERATION SECTION
    if completed < total:
        current = st.session_state.sections_to_process[completed]
        section_key = f"{current['section_number']} {current['section_title']}"
        attempts = st.session_state.generation_attempts.get(section_key, 0)
        
        # Check max attempts
        if attempts >= 3:
            st.error(f"⚠️ Failed to generate '{section_key}' after 3 attempts")
            st.warning("Mark for manual editing or skip")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("✏️ Write Manually", use_container_width=True):
                    manual_text = st.text_area("Write content:", height=400, key=f"manual_{section_key}")
                    if st.button("💾 Save & Continue"):
                        st.session_state.content[section_key] = manual_text
                        st.session_state.generation_attempts[section_key] = 0
                        st.success("Saved!")
                        time.sleep(1)
                        st.rerun()
            with col2:
                if st.button("⏭️ Skip & Add Placeholder", use_container_width=True):
                    st.session_state.content[section_key] = f"[MANUAL EDIT REQUIRED]\n\n**Section:** {section_key}\n**Topics:** {current['description']}"
                    st.session_state.generation_attempts[section_key] = 0
                    st.rerun()
            st.stop()
        
        st.markdown("---")
        st.markdown(f"### 🤖 Now Generating: {section_key}")
        
        if attempts > 0:
            st.warning(f"Attempt #{attempts + 1}")
        
        col1, col2 = st.columns([3, 1])
        with col1:
            st.info(f"**Unit:** {current['unit_title']}\n\n**Topics:** {current['description']}")
        with col2:
            if st.button("⏸️ Pause", use_container_width=True):
                st.session_state.paused = True
                st.rerun()
        
        # GENERATE OR PAUSE
        if not st.session_state.get('paused', False):
            st.session_state.generation_attempts[section_key] = attempts + 1
            
            with st.spinner(f"✍️ Writing '{current['section_title']}'... (30-60 seconds)"):
                system_prompt = f"""Expert academic writer for MBA programs. 

CRITICAL: You are writing ONLY section '{section_key}'. Do not write other sections.

Format:
- Clear paragraphs
- Bullet points (*)
- Figures: [[FIGURE X: description]]
- Check Your Progress:
  --- CHECK YOUR PROGRESS ---
  1. Question?
  2. Question?
  ---"""
                
                user_prompt = f"""**WRITE THIS SECTION ONLY:** {section_key}
**Unit:** {current['unit_title']}
**Topics:** {current['description']}
**Audience:** {st.session_state.get('target_audience', 'MBA')}

Write 500-700 words for {current['section_title']} ONLY.
DO NOT write other sections.
DO NOT repeat previous content."""
                
                messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}]
                content = make_api_call(messages)
                
                if content:
                    st.session_state.content[section_key] = content
                    st.session_state.generation_attempts[section_key] = 0
                    
                    if section_key not in st.session_state.content:
                        st.error("Content not saved!")
                        st.stop()
                    
                    st.success(f"✅ Done: {section_key}")
                    
                    with st.expander("📄 Just Generated - Review", expanded=True):
                        st.markdown(f"#### {section_key}")
                        st.markdown(content)
                        st.caption(f"📊 {len(content.split())} words")
                        
                        if st.checkbox("✏️ Edit before continuing", key=f"edit_check_{section_key}"):
                            edited = st.text_area("Edit:", content, height=300, key=f"edit_{section_key}")
                            if st.button("💾 Save", key=f"save_{section_key}"):
                                st.session_state.content[section_key] = edited
                                st.success("Saved!")
                                time.sleep(1)
                                st.rerun()
                            st.stop()
                    
                    time.sleep(2)
                    st.rerun()
                else:
                    st.error(f"❌ Failed: {section_key}")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if st.button("🔄 Retry", use_container_width=True):
                            st.rerun()
                    with col2:
                        if st.button("✏️ Manual", use_container_width=True):
                            st.session_state.paused = True
                            st.rerun()
                    with col3:
                        if st.button("⏭️ Skip", use_container_width=True):
                            st.session_state.content[section_key] = f"[Skipped - {section_key}]"
                            st.session_state.generation_attempts[section_key] = 0
                            st.rerun()
                    st.stop()
        else:
            st.warning("⏸️ Paused - Review content above")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("▶️ Continue", type="primary", use_container_width=True):
                    st.session_state.paused = False
                    st.rerun()
            with col2:
                if st.button("✏️ Write Manually", use_container_width=True):
                    manual_text = st.text_area(f"Write {section_key}:", height=400, key=f"paused_manual_{section_key}")
                    if st.button("💾 Save & Continue"):
                        st.session_state.content[section_key] = manual_text
                        st.session_state.paused = False
                        st.session_state.generation_attempts[section_key] = 0
                        st.success("Saved!")
                        time.sleep(1)
                        st.rerun()
    
    else:
        # ALL DONE
        st.success("🎉 All content generated!")
        
        st.markdown("---")
        st.markdown("### 📊 Document Statistics")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("📄 Sections", total)
        with col2:
            total_words = sum(len(c.split()) for c in st.session_state.content.values())
            st.metric("📝 Words", f"{total_words:,}")
        with col3:
            total_chars = sum(len(c) for c in st.session_state.content.values())
            pages = total_chars / 3000
            st.metric("📖 Pages", f"{pages:.0f}")
        with col4:
            fig_count = len(set(re.findall(r'\[\[FIGURE\s+(\d+):', ' '.join(st.session_state.content.values()), re.IGNORECASE)))
            st.metric("🖼️ Figures", fig_count)
        
        st.markdown("---")
        
        # Figure prompts
        fig_nums = set()
        fig_descs = {}
        for content in st.session_state.content.values():
            figs = re.findall(r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]', content, re.IGNORECASE)
            for num, desc in figs:
                num = int(num)
                fig_nums.add(num)
                if num not in fig_descs:
                    fig_descs[num] = desc
        
        if fig_nums:
            with st.expander(f"🎨 Image Prompts ({len(fig_nums)} figures)", expanded=True):
                st.markdown("### Copy to AI image generators")
                for num in sorted(fig_nums):
                    desc = fig_descs.get(num, "")
                    col1, col2 = st.columns([1, 4])
                    with col1:
                        st.markdown(f"**Figure {num}**")
                    with col2:
                        prompt = f"Professional academic diagram: {desc}. Style: clean, educational, high contrast, white background."
                        st.code(prompt, language="text")
        
        st.markdown("---")
        
        # Quick edit
        with st.expander("📝 Edit Any Section", expanded=False):
            for unit in st.session_state.approved_outline:
                st.markdown(f"### UNIT {unit['unit_number']}: {unit['unit_title']}")
                for section in unit.get('sections', []):
                    sec_key = f"{section['section_number']} {section['section_title']}"
                    if sec_key in st.session_state.content:
                        with st.expander(f"Edit: {sec_key}"):
                            edited = st.text_area("Content:", st.session_state.content[sec_key], 
                                                height=300, key=f"final_edit_{sec_key}")
                            if st.button(f"💾 Update", key=f"update_{sec_key}"):
                                st.session_state.content[sec_key] = edited
                                st.success("Updated!")
        
        st.markdown("---")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("🖼️ Add Images & Compile", type="primary", use_container_width=True):
                st.session_state.step = "image_upload"
                st.rerun()
        with col2:
            if st.button("← Back to Outline", use_container_width=True):
                if st.checkbox("⚠️ Discard content?"):
                    del st.session_state.content
                    st.session_state.step = "outline_generation"
                    st.rerun()

def show_image_upload_page():
    st.header("Step 3.5: Upload Images")
    
    fig_nums = set()
    fig_descs = {}
    for content in st.session_state.content.values():
        figs = re.findall(r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]', content, re.IGNORECASE)
        for num, desc in figs:
            num = int(num)
            fig_nums.add(num)
            if num not in fig_descs:
                fig_descs[num] = desc
    
    if not fig_nums:
        st.info("No figures detected")
        if st.button("Compile PDF", type="primary"):
            st.session_state.step = "compilation"
            st.rerun()
        return
    
    if 'uploaded_images' not in st.session_state:
        st.session_state.uploaded_images = {}
    
    for num in sorted(fig_nums):
        desc = fig_descs.get(num, "")
        uploaded = st.file_uploader(f"Figure {num}: {desc}", type=['png', 'jpg'], key=f"fig_{num}")
        if uploaded:
            st.session_state.uploaded_images[num] = uploaded
    
    if st.button("Compile PDF", type="primary"):
        st.session_state.step = "compilation"
        st.rerun()

def show_compilation_page():
    st.header("Step 4: Compile PDF")
    
    if 'content' not in st.session_state:
        st.error("No content")
        return
    
    with st.spinner("Compiling..."):
        pdf_file = compile_pdf(
            st.session_state.course_title,
            st.session_state.content,
            st.session_state.approved_outline,
            st.session_state.get('target_audience', 'Postgraduate'),
            st.session_state.get('uploaded_images', {})
        )
    
    if pdf_file and os.path.exists(pdf_file):
        st.success("Done!")
        with open(pdf_file, "rb") as f:
            pdf_bytes = f.read()
        
        st.download_button("Download PDF", pdf_bytes, 
                         file_name=f"{st.session_state.course_title.replace(' ', '_')}.pdf",
                         mime="application/pdf")

def main():
    st.set_page_config(page_title="AI Curriculum Generator", page_icon="🎓", layout="wide")
    st.title("🎓 AI Curriculum Generator")
    
    if 'step' not in st.session_state:
        st.session_state.step = "configuration"
    if 'api_key' not in st.session_state:
        st.session_state.api_key = DEFAULT_API_KEY
    
    if st.session_state.step == "configuration":
        show_configuration_page()
    elif st.session_state.step == "outline_generation":
        show_outline_page()
    elif st.session_state.step == "content_generation":
        show_content_generation_page()
    elif st.session_state.step == "image_upload":
        show_image_upload_page()
    elif st.session_state.step == "compilation":
        show_compilation_page()

if __name__ == "__main__":
    main()
