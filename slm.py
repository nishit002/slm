"""
AI CURRICULUM GENERATOR - FRESH COPY
====================================
Complete working version without any syntax errors.

Save this as: app.py
Run with: streamlit run app.py
"""

import streamlit as st
import requests
import json
import subprocess
import time
import os
import re
from datetime import datetime

# --- Configuration ---
DEFAULT_API_KEY = "xai-6QJwG3u6540lVZyXbFBArvLQ43ZyJsrnq65pyCWhxh5zXqNvtwe6LdTURbTwvE2sA3Uxlb9gn82Vamgu"
API_URL = "https://api.x.ai/v1/chat/completions"

# --- LaTeX Template ---
LATEX_TEMPLATE = r"""
\documentclass[12pt, a4paper]{report}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{geometry}
\usepackage{fancyhdr}
\usepackage{tocbibind}
\usepackage{titlesec}
\usepackage{xcolor}
\usepackage{hyperref}
\usepackage{enumitem}
\usepackage{float}
\usepackage{caption}

\geometry{a4paper, margin=1in, top=1.25in, bottom=1.25in}

\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=cyan,
    pdftitle={Academic Study Material},
    pdfpagemode=FullScreen,
}

\pagestyle{fancy}
\fancyhf{}
\fancyhead[L]{\textit{\nouppercase{\leftmark}}}
\fancyhead[R]{\thepage}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0pt}

\titleformat{\chapter}[display]
  {\normalfont\Large\bfseries\centering}
  {\MakeUppercase{\chaptertitlename} \thechapter}{10pt}{\Large\MakeUppercase}
\titlespacing*{\chapter}{0pt}{-20pt}{30pt}

\titleformat{\section}
  {\normalfont\large\bfseries}{\thesection}{1em}{}
\titleformat{\subsection}
  {\normalfont\normalsize\bfseries}{\thesubsection}{1em}{}

\captionsetup{font=small, labelfont=bf, justification=centering}

\usepackage{setspace}
\onehalfspacing

\begin{document}

\begin{titlepage}
\centering
\vspace*{2cm}
{\LARGE\bfseries %(course_title)s\par}
\vspace{1.5cm}
{\Large Academic Study Material\par}
\vspace{1cm}
{\large For %(target_audience)s\par}
\vspace{2cm}
\vfill
{\large Generated by AI Curriculum Generator\par}
{\large \today\par}
\end{titlepage}

\tableofcontents
\clearpage

%(list_of_figures)s

%(content)s

\end{document}
"""

# --- Helper Functions ---

def get_api_headers():
    """Get API headers with current API key."""
    api_key = st.session_state.get('api_key', DEFAULT_API_KEY)
    return {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

def make_api_call(messages, retries=3, delay=5):
    """Makes API call with retry logic."""
    headers = get_api_headers()
    payload = {
        "messages": messages,
        "model": "grok-4-latest",
        "stream": False,
        "temperature": 0.3
    }
    
    for attempt in range(retries):
        try:
            response = requests.post(API_URL, headers=headers, json=payload, timeout=300)
            response.raise_for_status()
            return response.json()['choices'][0]['message']['content']
        except requests.exceptions.Timeout:
            st.warning(f"Request timed out (Attempt {attempt + 1}/{retries}). Retrying...")
            time.sleep(delay)
        except requests.exceptions.RequestException as e:
            st.warning(f"API call failed (Attempt {attempt + 1}/{retries}): {e}")
            time.sleep(delay)
    
    st.error("API call failed after retries. Check your API key.")
    return None

def escape_latex(text):
    """Escapes special LaTeX characters."""
    if not text:
        return ""
    text = str(text)
    text = text.replace('\\', '\\textbackslash{}')
    text = text.replace('{', '\\{')
    text = text.replace('}', '\\}')
    text = text.replace('_', '\\_')
    text = text.replace('#', '\\#')
    text = text.replace('%', '\\%')
    text = text.replace('&', '\\&')
    text = text.replace('$', '\\$')
    text = text.replace('~', '\\textasciitilde{}')
    text = text.replace('^', '\\textasciicircum{}')
    return text

def markdown_to_latex(md_text):
    """Converts markdown to LaTeX."""
    if not md_text:
        return ""
    
    # Check Your Progress blocks
    md_text = re.sub(
        r'---\s*CHECK YOUR PROGRESS\s*---(.*?)---+',
        r'\n\\begin{center}\n\\fbox{\\begin{minipage}{0.9\\textwidth}\n\\textbf{CHECK YOUR PROGRESS}\n\\begin{enumerate}\1\\end{enumerate}\n\\end{minipage}}\n\\end{center}\n',
        md_text,
        flags=re.DOTALL | re.IGNORECASE
    )
    
    # Figure placeholders
    md_text = re.sub(
        r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]',
        r'\n\\begin{figure}[H]\n\\centering\n\\includegraphics[width=0.7\\textwidth]{figure_\1.png}\n\\caption{\2}\n\\label{fig:\1}\n\\end{figure}\n',
        md_text,
        flags=re.IGNORECASE
    )
    
    # Headers
    md_text = re.sub(r'^# UNIT (\d+):\s*(.*)$', r'\\chapter{\2}', md_text, flags=re.MULTILINE)
    md_text = re.sub(r'^##\s*(\d+\.\d+)\s+(.*)$', r'\\section{\2}', md_text, flags=re.MULTILINE)
    md_text = re.sub(r'^###\s+(.*)$', r'\\subsection{\1}', md_text, flags=re.MULTILINE)
    
    # Bold and Italic
    md_text = re.sub(r'\*\*(.*?)\*\*', r'\\textbf{\1}', md_text)
    md_text = re.sub(r'\*(.*?)\*', r'\\textit{\1}', md_text)
    
    # Lists
    lines = md_text.split('\n')
    result = []
    in_list = False
    
    for line in lines:
        if re.match(r'^\s*[-*]\s+', line):
            if not in_list:
                result.append('\\begin{itemize}')
                in_list = True
            item = re.sub(r'^\s*[-*]\s+', '', line)
            result.append(f'\\item {item}')
        else:
            if in_list:
                result.append('\\end{itemize}')
                in_list = False
            result.append(line)
    
    if in_list:
        result.append('\\end{itemize}')
    
    md_text = '\n'.join(result)
    return escape_latex(md_text)

def compile_pdf(course_title, content_dict, outline, target_audience="Postgraduate", uploaded_images=None):
    """Compiles PDF using pdflatex."""
    st.info("Assembling document...")
    
    # Save images
    has_figures = False
    if uploaded_images:
        for fig_num, img_file in uploaded_images.items():
            if img_file:
                has_figures = True
                with open(f"figure_{fig_num}.png", "wb") as f:
                    f.write(img_file.getvalue())
    
    # Assemble content
    full_content = ""
    for unit in outline:
        unit_num = unit.get('unit_number', 1)
        unit_title = unit.get('unit_title', 'Untitled')
        full_content += f"# UNIT {unit_num}: {unit_title}\n\n"
        
        for section in unit.get('sections', []):
            sec_num = section.get('section_number', '1.1')
            sec_title = section.get('section_title', 'Untitled')
            sec_key = f"{sec_num} {sec_title}"
            full_content += f"## {sec_key}\n\n"
            full_content += content_dict.get(sec_key, "Content not generated.") + "\n\n"
    
    st.info("Converting to LaTeX...")
    latex_content = markdown_to_latex(full_content)
    
    list_of_figs = "\\listoffigures\n\\clearpage\n" if has_figures else ""
    
    final_doc = LATEX_TEMPLATE % {
        'course_title': escape_latex(course_title),
        'target_audience': escape_latex(target_audience),
        'list_of_figures': list_of_figs,
        'content': latex_content
    }
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"curriculum_{timestamp}"
    
    with open(f"{filename}.tex", "w", encoding='utf-8') as f:
        f.write(final_doc)
    
    st.info("Compiling PDF...")
    try:
        for i in range(3):
            subprocess.run(['pdflatex', '-interaction=nonstopmode', f'{filename}.tex'],
                         check=True, capture_output=True, timeout=120)
        st.success("PDF compiled!")
        return f"{filename}.pdf"
    except Exception as e:
        st.error(f"Compilation failed: {e}")
        return None

# --- UI Functions ---

def show_configuration_page():
    """Step 1: Configuration."""
    st.header("Step 1: Configure Your Course")
    
    st.subheader("API Configuration")
    col1, col2 = st.columns([3, 1])
    with col1:
        api_key = st.text_input("Grok API Key", value=st.session_state.get('api_key', DEFAULT_API_KEY),
                                type="password", key="api_key_input")
        st.session_state.api_key = api_key
    with col2:
        if st.button("Test API", use_container_width=True):
            with st.spinner("Testing..."):
                resp = make_api_call([{"role": "user", "content": "Say 'API working'"}])
                if resp:
                    st.success("API working!")
                else:
                    st.error("API test failed")
    
    st.divider()
    st.subheader("Course Details")
    
    st.text_input("Course Title", "Organisational Behaviour: Concept, Nature & Historical Perspectives", key="course_title")
    st.selectbox("Target Audience", ["Postgraduate (MBA)", "University Undergraduate", "Professional Development"], key="target_audience")
    st.text_area("Learning Objectives", "Develop comprehensive content for a 3-credit MBA course...", key="learning_objectives", height=150)
    
    st.divider()
    if st.button("Generate Course Outline", type="primary"):
        if st.session_state.get('api_key'):
            st.session_state.step = "outline_generation"
            st.rerun()
        else:
            st.error("Please enter API key first!")

def show_outline_page():
    """Step 2: Outline."""
    st.header("Step 2: Review Course Outline")
    
    if 'outline' not in st.session_state:
        with st.spinner("Generating outline..."):
            system_prompt = """Create a JSON array of units with sections. Each unit needs: unit_number, unit_title, sections array. Each section needs: section_number, section_title, description. First two sections must be Introduction and Objectives. Last two must be Let Us Sum Up and Unit End Activities. Output only JSON."""
            
            user_prompt = f"Course: {st.session_state.course_title}\nAudience: {st.session_state.target_audience}\nCreate 4-6 units with 6-10 sections each."
            
            messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}]
            outline_str = make_api_call(messages)
            
            if outline_str:
                try:
                    json_match = re.search(r'```(?:json)?\s*\n(.*?)\n```', outline_str, re.DOTALL)
                    if json_match:
                        outline_str = json_match.group(1)
                    st.session_state.outline = json.loads(outline_str.strip())
                except:
                    st.error("Failed to parse outline")
                    st.session_state.outline = [{"unit_number": 1, "unit_title": "Unit 1", "sections": [
                        {"section_number": "1.1", "section_title": "Introduction", "description": "Overview"}
                    ]}]
    
    if 'outline' in st.session_state:
        rows = []
        for unit in st.session_state.outline:
            for section in unit.get('sections', []):
                rows.append({
                    'unit_number': unit['unit_number'],
                    'unit_title': unit['unit_title'],
                    'section_number': section['section_number'],
                    'section_title': section['section_title'],
                    'description': section['description']
                })
        
        edited = st.data_editor(rows, num_rows="dynamic", use_container_width=True, height=500)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Units", len(set(r['unit_number'] for r in edited)))
        with col2:
            st.metric("Sections", len(edited))
        with col3:
            avg = len(edited) / len(set(r['unit_number'] for r in edited))
            st.metric("Avg/Unit", f"{avg:.1f}")
        
        st.divider()
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Approve & Begin Writing", type="primary", use_container_width=True):
                approved = []
                current = None
                for row in edited:
                    if current is None or current['unit_number'] != row['unit_number']:
                        if current:
                            approved.append(current)
                        current = {'unit_number': row['unit_number'], 'unit_title': row['unit_title'], 'sections': []}
                    current['sections'].append({
                        'section_number': row['section_number'],
                        'section_title': row['section_title'],
                        'description': row['description']
                    })
                if current:
                    approved.append(current)
                st.session_state.approved_outline = approved
                st.session_state.step = "content_generation"
                st.rerun()
        with col2:
            if st.button("Back", use_container_width=True):
                del st.session_state.outline
                st.session_state.step = "configuration"
                st.rerun()

def show_content_generation_page():
    """Step 3: Content Generation."""
    st.header("Step 3: Content Generation")
    
    if 'approved_outline' not in st.session_state:
        st.error("No outline found")
        if st.button("Go to Configuration"):
            st.session_state.step = "configuration"
            st.rerun()
        return
    
    if 'content' not in st.session_state:
        st.session_state.content = {}
        st.session_state.sections_to_process = []
        for unit in st.session_state.approved_outline:
            for section in unit.get('sections', []):
                st.session_state.sections_to_process.append({
                    'unit_number': unit['unit_number'],
                    'unit_title': unit['unit_title'],
                    'section_number': section['section_number'],
                    'section_title': section['section_title'],
                    'description': section.get('description', '')
                })
    
    total = len(st.session_state.sections_to_process)
    completed = len(st.session_state.content)
    
    st.progress(completed / total if total > 0 else 0, text=f"Progress: {completed}/{total}")
    
    if completed < total:
        current = st.session_state.sections_to_process[completed]
        section_key = f"{current['section_number']} {current['section_title']}"
        
        st.subheader(f"Generating: {section_key}")
        
        with st.spinner("Writing content..."):
            system_prompt = "You are an academic content developer for MBA programs. Write comprehensive, rigorous content for ONE section. Include figure placeholders as [[FIGURE X: description]] where appropriate."
            
            user_prompt = f"Section: {section_key}\nDescription: {current['description']}\nWrite 400-600 words of academic content."
            
            messages = [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}]
            content = make_api_call(messages)
            
            if content:
                st.session_state.content[section_key] = content
                st.success(f"Completed!")
                time.sleep(1)
                st.rerun()
            else:
                st.error("Generation failed")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Retry"):
                        st.rerun()
                with col2:
                    if st.button("Skip"):
                        st.session_state.content[section_key] = "[Failed]"
                        st.rerun()
    else:
        st.success("All content generated!")
        
        # Show figure prompts
        fig_nums = set()
        for content in st.session_state.content.values():
            figs = re.findall(r'\[\[FIGURE\s+(\d+):', content, re.IGNORECASE)
            fig_nums.update(int(f) for f in figs)
        
        if fig_nums:
            with st.expander("Image Generation Prompts", expanded=True):
                for num in sorted(fig_nums):
                    for content in st.session_state.content.values():
                        match = re.search(rf'\[\[FIGURE\s+{num}:\s*(.*?)\]\]', content, re.IGNORECASE)
                        if match:
                            st.markdown(f"**Figure {num}:**")
                            prompt = f"Professional academic diagram: {match.group(1)}. Style: clean, professional, educational."
                            st.code(prompt)
                            break
        
        # Show content
        for unit in st.session_state.approved_outline:
            with st.expander(f"UNIT {unit['unit_number']}: {unit['unit_title']}", expanded=False):
                for section in unit.get('sections', []):
                    sec_key = f"{section['section_number']} {section['section_title']}"
                    if sec_key in st.session_state.content:
                        edited = st.text_area(sec_key, st.session_state.content[sec_key], height=200, key=f"edit_{sec_key}")
                        st.session_state.content[sec_key] = edited
        
        st.divider()
        if st.button("Proceed to Image Upload", type="primary"):
            st.session_state.step = "image_upload"
            st.rerun()

def show_image_upload_page():
    """Step 3.5: Image Upload."""
    st.header("Step 3.5: Upload Images")
    
    fig_nums = set()
    fig_descs = {}
    for content in st.session_state.content.values():
        figs = re.findall(r'\[\[FIGURE\s+(\d+):\s*(.*?)\]\]', content, re.IGNORECASE)
        for num, desc in figs:
            num = int(num)
            fig_nums.add(num)
            if num not in fig_descs:
                fig_descs[num] = desc
    
    if not fig_nums:
        st.info("No figures detected")
        if st.button("Compile PDF", type="primary"):
            st.session_state.step = "compilation"
            st.rerun()
        return
    
    st.info(f"Total figures: {len(fig_nums)}")
    
    if 'uploaded_images' not in st.session_state:
        st.session_state.uploaded_images = {}
    
    for num in sorted(fig_nums):
        desc = fig_descs.get(num, "")
        col1, col2 = st.columns([3, 1])
        with col1:
            uploaded = st.file_uploader(f"Figure {num}: {desc}", type=['png', 'jpg'], key=f"fig_{num}")
            if uploaded:
                st.session_state.uploaded_images[num] = uploaded
        with col2:
            if uploaded:
                st.image(uploaded, width=150)
    
    st.divider()
    uploaded_count = len(st.session_state.uploaded_images)
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Uploaded", f"{uploaded_count}/{len(fig_nums)}")
    with col2:
        if st.button("Compile PDF", type="primary", use_container_width=True):
            st.session_state.step = "compilation"
            st.rerun()

def show_compilation_page():
    """Step 4: Compilation."""
    st.header("Step 4: Compile PDF")
    
    if 'content' not in st.session_state:
        st.error("No content found")
        return
    
    with st.spinner("Compiling PDF..."):
        pdf_file = compile_pdf(
            st.session_state.course_title,
            st.session_state.content,
            st.session_state.approved_outline,
            st.session_state.get('target_audience', 'Postgraduate'),
            st.session_state.get('uploaded_images', {})
        )
    
    if pdf_file and os.path.exists(pdf_file):
        st.success("PDF Ready!")
        with open(pdf_file, "rb") as f:
            pdf_bytes = f.read()
        
        col1, col2 = st.columns(2)
        with col1:
            st.download_button("Download PDF", pdf_bytes, 
                             file_name=f"{st.session_state.course_title.replace(' ', '_')}.pdf",
                             mime="application/pdf", use_container_width=True)
        with col2:
            if st.button("New Project", use_container_width=True):
                api_key = st.session_state.get('api_key')
                for key in list(st.session_state.keys()):
                    del st.session_state[key]
                if api_key:
                    st.session_state.api_key = api_key
                st.rerun()
    else:
        st.error("Compilation failed")

def main():
    """Main app."""
    st.set_page_config(page_title="AI Curriculum Generator", page_icon="🎓", layout="wide")
    st.title("🎓 AI Curriculum Generator")
    
    if 'step' not in st.session_state:
        st.session_state.step = "configuration"
    if 'api_key' not in st.session_state:
        st.session_state.api_key = DEFAULT_API_KEY
    
    with st.sidebar:
        st.header("Navigation")
        steps = {"configuration": "1️⃣ Config", "outline_generation": "2️⃣ Outline",
                "content_generation": "3️⃣ Content", "image_upload": "3.5️⃣ Images",
                "compilation": "4️⃣ PDF"}
        for key, name in steps.items():
            if key == st.session_state.step:
                st.markdown(f"**→ {name}**")
            else:
                st.markdown(f"　{name}")
    
    if st.session_state.step == "configuration":
        show_configuration_page()
    elif st.session_state.step == "outline_generation":
        show_outline_page()
    elif st.session_state.step == "content_generation":
        show_content_generation_page()
    elif st.session_state.step == "image_upload":
        show_image_upload_page()
    elif st.session_state.step == "compilation":
        show_compilation_page()

if __name__ == "__main__":
    main()
